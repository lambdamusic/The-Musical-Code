{
    // Place your snippets for extempore here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "metro-get-beat": {
        "prefix": "metro-get",
        "body": ["(*metro* 'get-beat ${1:4})"],
        "description": "metro get beat"
    },
    "metro-set-tempo": {
        "prefix": "metro-set",
        "body": ["(*metro* 'set-tempo ${1:120})"],
        "description": "metro set tempo"
    },    
    "loop-basic": {
        "prefix": ":loop1",
        "body": [
            "(define ${1:name}",
            "\t(lambda (beat)",
            "\t\t(let ((dur ${2: 1/16}))",
            "\t\t\t${3:(play c3 40 (* dur .9) 1)}",
            "\t\t\t(callback (*metro* (+ beat (* 1/2 dur))) '${1} (+ beat dur)))))",
            "\n(${1} (*metro* 'get-beat 1))$0"
        ],
        "description": "Loop basic with let"
    },
    "loop-rotate": {
        "prefix": ":loop2",
        "body": [
            "(define ${1:name}",
            "\t(lambda (beat notes durs)",
            "\t\t(let ((dur (car durs)) (p (car notes)))",
            "\t\t\t${2:(play p 40 (* dur .9) 1)}",
            "\t\t\t(callback (*metro* (+ beat (* 1/2 dur))) '${1} (+ beat dur)",
            "\t\t\t\t(rotate notes -1) (rotate durs -1)))))",
            "\n(${1} (*metro* 'get-beat 1) '(${3:60 67 69}) '(${4:4 2}))"
        ],
        "description": "Loop with rotating notes and durs"
    },
    "loop-pitch-vel-etc": {
        "prefix": ":loop3",
        "body": [
            "(define ${1:name}",
            "\t(lambda (beat pitch vel dur ch)",
            "\t\t(let ((dur dur))",
            "\t\t\t(play pitch vel (* dur .9) ch)",
            "\t\t\t(callback (*metro* (+ beat (* .5 dur))) '${1} (+ beat dur)",
            "\t\t\t\tpitch",
            "\t\t\t\tvel",
            "\t\t\t\tdur",
            "\t\t\t\tch))))",
            "\n($1 (*metro* 'get-beat ${2:1}) ${3:60} ${4:80} ${5:1/4} ${6:1})"
        ],
        "description": "Loop with pitch vel etc"
    },
    "Step Sequencer": {
        "prefix": ":steps",
        "body": ["(:steps ${1:looplength} '(${2:notes}) ${3:90} ${4:1/8} 1)"],
        "description": "Step sequencer. REQUIRES: beat, dur, *mididevice*. SIGNATURE (:steps 2[cycle-dur] 0[offset] 1[poffset] (list 40 42)[plist] 1[vol] 1/8[dur] 3[ch])"
    },
    "Arpeggio notes": {
        "prefix": ":arp",
        "body": ["(:arp '(${1:notes}) ${2:2} ${3:90} ${4:1})"],
        "description": "Arpeggio notes. REQUIRES: beat, *mididevice*. SIGNATURE (:arp 0[offset] (list 40 42)[plist] 2[dur] 90[vol] 3[ch])"
    },
    "Midi Play Note": {
        "prefix": "play",
        "body": ["(play c3 90 (* dur .9) 1)"],
        "description": "Midi Play Note - Instrument Implicit *mididevice*"
    },
    "Midi Kit": {
        "prefix": "kit",
        "body": ["(kit ${1:36} ${2:90})"],
        "description": "Play kit - hardwired to ch 1 "
    },
    "playchord": {
        "prefix": "playchord",
        "body": [
            "(playchord ${1:(list do mi sol)} ${2:90} ${3:1/2} ${4:1})",
        ],
        "description": "Midi play chord using for-each"
    },
    "For-each Chord": {
        "prefix": "chord-for-each",
        "body": [
            "(for-each (lambda (p)",
            "\t\t(play ${1:c3} ${2:90} ${3:1/8} ${4:1}))",
            "\t(pc:make-chord ${4:lower} ${5:upper} ${6:number} ${7:pcchord}))"
        ],
        "description": "Midi play chord using for-each"
    },
    ":bar": {
        "prefix": ":bar",
        "body": [
            "(:bar ${1:4}",
            "\t(:beat ${2:0} ${3:(play c3 90 1 1)})",
            ")"
        ],
        "description": ":bar structure for beat procedures"
    },
    ":beat": {
        "prefix": ":beat",
        "body": [
            "(:beat ${1:0} ${2:(play c3 90 1 1)})",
        ],
        "description": ":beat structure for :bar procedures"
    },
    ":chance": {
        "prefix": ":chance",
        "body": [
            "(:chance ${1:.5} ${2:(play c3 90 1 1)})",
        ],
        "description": "Do a list of proc if random > number"
    },
    ":ifchance": {
        "prefix": ":ifchance",
        "body": [
            "(:ifchance ${1:.5} ${2:(play c3 90 1 1)})",
        ],
        "description": "Do proc if random > number - with else"
    },
    ":offset": {
        "prefix": ":offset",
        "body": [
            "(offset ${1:12} ${2})",
        ],
        "description": "add atom-or-list to atom-or-list"
    },
    "onbeat": {
        "prefix": "onbeat",
        "body": ["(onbeat ${1:4} ${2:1} ${3:function})"],
        "description": "onbeat measure downbeat-0-based &procedures"
    },
    "ifbeat": {
        "prefix": "ifbeat",
        "body": ["(ifbeat ${1:4} ${2:1} ${3:function} ${3:elsefunction})"],
        "description": "ifbeat x y args . elseargs"
    },
    "ifbeat-gt": {
        "prefix": "ifbeatgt",
        "body": ["(ifbeat-gt ${1:4} ${2:1} ${3:function} ${3:elsefunction})"],
        "description": "ifbeat-gt x y args . elseargs"
    },
    "ifbeat-lt": {
        "prefix": "ifbeatlt",
        "body": ["(ifbeat-lt ${1:4} ${2:1} ${3:function} ${3:elsefunction})"],
        "description": "ifbeat-lt x y args . elseargs"
    },
    "ifbeat-btw": {
        "prefix": "ifbeatbtw",
        "body": ["(ifbeat-btw ${1:8} ${2:2} ${3:6} ${4:function} ${5:elsefunction})"],
        "description": "ifbeat-btw - measure downbeat1 downbeat2 procedure &elseprocedure"
    },
    "Wrap With OnBeat": {
        "prefix": "wrap-onbeat",
        "body": ["(onbeat ${1:4} ${2:1} $TM_SELECTED_TEXT)"],
        "description": "Wrap selected text with onbeat"
    },
    "println": {
        "prefix": "println",
        "body": ["(println $0)"],
        "description": "println"
    },
    "Wrap With println": {
        "prefix": "wrap-println",
        "body": [
            "(println $TM_SELECTED_TEXT)"
        ],
        "description": "Wrap selected text with println"
    },
    "Callback": {
        "prefix": "callback",
        "body": [
            "(callback (*metro* (+ beat (* 1/2 ${1:dur}))) '${2:loop} (+ beat $1) $3)$0"
        ],
        "description": "Callback standard"
    },
    "If": {
        "prefix": "if",
        "body": ["(if (${1:#t})", "\t${2:(println 'yes)}", "\t${3:(println 'no)})"],
        "description": "If basic"
    },
    "If cdr not null": {
        "prefix": "ifcdr-notnull",
        "body": ["(if-cdr-notnull ${1:list1} ${2:list2})$0"],
        "description": "If cdr not null"
    },
    "if-mod": {
        "prefix": "ifmod",
        "body": ["(if (${1:=} (modulo beat ${2:1})", "\t${3:0})", "\t$0)$0"],
        "description": "if modulo beat"
    },
    "if-not-null": {
        "prefix": "ifnotn",
        "body": ["(if (not (null? $1))$0)$0"],
        "description": "if not null"
    },
    "if-null-set": {
        "prefix": "ifnull",
        "body": ["(if (null? ${1:x}) (set! $1 $0))$0"],
        "description": "if null set!"
    },
    "If random": {
        "prefix": "ifrandom",
        "body": ["(if (< (random) ${1:prob}) $0)$0"],
        "description": "if random (extended)"
    },
    "cond": {
        "prefix": "cond ",
        "body": [
            "(cond (cond1 proced1)",
            "\t\t\t(cond2 proced2)",
            "\t\t\t(else 0))"
        ],
        "description": "cond"
    },
    "cond-mod": {
        "prefix": "cond-modulo",
        "body": [
            "(cond ((= (modulo beat ${1:8}) ${2:0})",
                    "\t\t(play c3 80 1/2 1))",
                 "\t\t((= (modulo beat 8) 2)",
                    "\t\t(play c4 90 1/2 1))",
                "\t\t(else 0)) "           
        ],
        "description": "conditional on module"
    },
    "random-list": {
        "prefix": "random-list",
        "body": ["(random '($0))$0"],
        "description": "random element from list"
    },
    "random-range": {
        "prefix": "random-range",
        "body": ["(random ${1:60} ${2:90})$0"],
        "description": "random number from range"
    },
    "rassoc": {
        "prefix": "rassoc",
        "body": ["(random (cdr (assoc ${1:key} '(($0)))))$0"],
        "description": "random from assoc"
    },
    "inc": {
        "prefix": "inc",
        "body": ["(set! ${1:var} (${2:+} $1 $0))$0"],
        "description": "increment variable via set!"
    },
    "rotate": {
        "prefix": "rotate",
        "body": [
            "(set! ${1:list} (rotate $1 -1))"
        ],
        "description": "rotate list and set! it"
    },
    "cosr": {
        "prefix": "cosr",
        "body": ["(cosr ${1:cen} ${2:amp} ${3:freq})$0"],
        "description": "cosr"
    },
    "cosratio": {
        "prefix": "cosratio",
        "body": ["(cosratio ${1:cen} ${2:amp} ${3:freq})$0"],
        "description": "cosratio"
    },

    "cosrfloor": {
        "prefix": "cosrfloor",
        "body": ["(cosrfloor ${1:cen} ${2:amp} ${3:freq})$0"],
        "description": "cosfloor "
    },
    "define-fun": {
        "prefix": "define-fun",
        "body": ["(define ${1:func-name}", "\t(lambda ($2)", "\t\t${3}))"],
        "description": "Define structure"
    },
    "define-var": {
        "prefix": ":define-var",
        "body": ["(define ${1:varname} ${2:value})"],
        "description": "Define structure"
    },
    "dotimes": {
        "prefix": "dotimes",
        "body": ["(dotimes (${1:i} ${2:limit})", "\t${3})"],
        "description": "dotimes"
    },
    "Wrap With dotimes": {
        "prefix": "wrap-dotimes",
        "body": [
            "(dotimes (${1:i} ${2:limit})","\t$TM_SELECTED_TEXT\n)"
        ],
        "description": "Wrap selected text with dotimes"
    },
    "for each": {
        "prefix": "foreach",
        "body": [
            "(for-each (lambda (x)",
            "\t(play ${1:c3} ${2:90} ${3:1/8} ${4:1}))",
            "\tnotes)))"
        ],
        "description": "for each with note"
    },
    "for-each-chord": {
        "prefix": "foreachc",
        "body": [
            "(for-each (lambda (p)",
            "\t(play ${1:sampler} p ${2:vol} ${3:dur}))",
            "\t(pc:make-chord ${4:min} ${5:max} ${6:n} ${7:'(0 4 7)}))$0"
        ],
        "description": "For each with chord "
    },
    "for-each-chord-arp": {
        "prefix": "foreachca",
        "body": [
            "(for-each (lambda (p t)",
            "(play t ${1:sampler} p ${2:80} ${3:dur}))",
            "${4:'(60  64 67)}",
            "${5:'(0 1/4 1/2)})$0"
        ],
        "description": "for each with chord arpeggiato"
    },
    "let": {
        "prefix": "let",
        "body": ["(let ((a $1)\n\t\t  (b $2))\n\t\t$3)"],
        "description": "let - basic "
    },
    "let-beat": {
        "prefix": "let-beat",
        "body": ["(let ((beat (*metro* 'get-beat)))\n\t$0)"],
        "description": "let with beat "
    },
    "Wrap With let": {
        "prefix": "wrap-let",
        "body": [
            "(let (($0))\n\t$TM_SELECTED_TEXT\n)"
        ],
        "description": "Wrap selected text with let"
    },
    "let-named-simple": {
        "prefix": "letn",
		"body": [
			"(let llop ((i 0) (n '(1/2)))",
				"\t(if (< i 6)",
			        "\t\t(llop (+ i 1) (append n (list (+ (cl:last n) (oneof 1/2 1 2)))))",
			        "\t\tn)",
			     "\t${1|;; do something with llop..|}$0"
        ],
        "description": "let named simple"
    },
    "let-named-cons": {
        "prefix": "letn",
            "body": [
                "(let loop ((i 0)",
                        "\t\t(lst '(60)))",
                    "\t(if (< i 24)",
                        "\t\t(loop (+ i 1)",
                                "\t\t\t(cons (+ (car lst) (random (list -1 1))) '(0 2 4 5 7 9 11))",
                                    "\t\t\tlst))",
                        "\t\t(println lst))$0"
        ],
        "description": "named let with cons"
    },
    "let - Melody list maker": {
        "prefix": "letmelody",
        "body": [
            "(define melody (let loop ((i 0)",
            "\t\t\t(lst '(60)))",
            "\t(if (< i 24)",
            "\t\t(loop (+ i 1)",
            "\t\t\t(cons (pc:relative (car lst)",
            "\t\t\t\t(random '(-1 1))",
            "\t\t\t\t'(0 2 4 5 7 9 11))",
            "\t\t\tlst))",
            "\t\t(cdr (reverse lst)))))"
        ],
        "description": "Create melody from loop and scale"
    },
    "map": {
        "prefix": "map",
        "body": [
            "(map (lambda (${1:x}) (println $0$1)) ${2:'(1 2 3)})"
        ],
        "description": "map"
    },
    "assoc": {
        "prefix": "assoc ",
        "body": [
            "(assoc $1 '(($0)))"
        ],
        "description": "assoc"
    },
    "make-list-with-proc": {
        "prefix": "makel",
        "body": [
            "(make-list-with-proc ${1:length} (lambda (x) ${2:(random 10)} )))"
        ],
        "description": "make list with proceedings [use :mklist instead]"
    },
    ":mklist": {
        "prefix": ":mklist",
        "body": [
            "(:mklist ${1:length} ${2:(random 10)} )"
        ],
        "description": "make list from precedure"
    },    
    ":mkchord": {
        "prefix": ":mkchord",
        "body": [
            "(:mkchord ${1:pitch} '${2:^|^sus|^6|^64|^7|^65|^43|^42|^2|^7#4|^9|7|9|65|43|2|42|-|-sus|-6|-64|-7|-65|-43|-42|-2|-9|o|o6|o64|o7|o65|o43|o42|o2|-7b5} ${3:notes-default-3})"
        ],
        "description": "Chord pitch list. DEFAULTS: mode=^ / notes=3."
    },
    ":mkchordrandom": {
        "prefix": ":mkchordrandom",
        "body": [
            "(:mkchordrandom ${1:pitch} '${2:^|^sus|^6|^64|^7|^65|^43|^42|^2|^7#4|^9|7|9|65|43|2|42|-|-sus|-6|-64|-7|-65|-43|-42|-2|-9|o|o6|o64|o7|o65|o43|o42|o2|-7b5-DEfault-^} ${3:notes-default-3} ${4:upper-limiti-default-120})"
        ],
        "description": "Chord pitch list rnd. DEFAULTS: mode=^ / notes=3."
    },
    ":sym-chords": {
        "prefix": ":sym-chords",
        "body": [
            "'${2:^|^sus|^6|^64|^7|^65|^43|^42|^2|^7#4|^9|7|9|65|43|2|42|-|-sus|-6|-64|-7|-65|-43|-42|-2|-9|o|o6|o64|o7|o65|o43|o42|o2|-7b5}"
        ],
        "description": "Chord symbols"
    },
    ":mkscale": {
        "prefix": ":mkscale",
        "body": [
            "(:mkscale ${1:root} '${2:pentatonic|wholetone|chromatic|octatonic|messiaen1|messiaen2|messiaen3|messiaen4|messiaen5|messiaen6|messiaen7|ionian|dorian|phrygian|lydian|lydian-dominant|lydian-mixolydian|mixolydian|aeolian|locrian} ${3:notes})"
        ],
        "description": "Make a scale. DEFAULTS: root=60 /  mode=ionian / notes=1octave / octaves=1."
    },
    ":mkrel": {
        "prefix": ":mkrel",
        "body": [
            "(:mkrel ${1:root} ${2:0} '${3:pentatonic|wholetone|chromatic|octatonic|messiaen1|messiaen2|messiaen3|messiaen4|messiaen5|messiaen6|messiaen7|ionian|dorian|phrygian|lydian|lydian-dominant|lydian-mixolydian|mixolydian|aeolian|locrian} ${4:notes})"
        ],
        "description": ":mkrel root reldegree mode num-notes"
    },
    ":sym-scales": {
        "prefix": ":sym-scales",
        "body": [
            "'${2:pentatonic|wholetone|chromatic|octatonic|messiaen1|messiaen2|messiaen3|messiaen4|messiaen5|messiaen6|messiaen7|ionian|dorian|phrygian|lydian|lydian-dominant|lydian-mixolydian|mixolydian|aeolian|locrian}"
        ],
        "description": "Scales symbols"
    },
    // "mu:chord": {
    //     "prefix": ":muchord",
    //     "body": [
    //         "(mu:chord ${1:pitch} '${2:^|^sus|^6|^64|^7|^65|^43|^42|^2|^7#4|^9|7|9|65|43|2|42|-|-sus|-6|-64|-7|-65|-43|-42|-2|-9|o|o6|o64|o7|o65|o43|o42|o2|-7b5})"
    //     ],
    //     "description": "mu:chord"
    // },
    // "mu:scale": {
    //     "prefix": ":muscale",
    //     "body": [
    //         "(mu:scale ${1:pitch} '${2:pentatonic|wholetone|chromatic|octatonic|messiaen1|messiaen2|messiaen3|messiaen4|messiaen5|messiaen6|messiaen7|ionian|dorian|phrygian|lydian|lydian-dominant|lydian-mixolydian|mixolydian|aeolian|locrian})$0"
    //     ],
    //     "description": "mu:scale"
    // },
    "mu:test": {
        "prefix": ":mutest",
        "body": ["(mu:test 38 1)"],
        "description": "Midi test single note"
    },
    "mu:testchord": {
        "prefix": ":mutestchord",
        "body": ["(mu:testchord '(60 63 67) )"],
        "description": "Midi test with chord"
    },
    "pc:chord": {
        "prefix": "pcchord",
        "body": [
            "(pc:chord ${1:root} '${2:^|^sus|^6|^64|^7|^65|^43|^42|^2|^7#4|^9|7|9|65|43|2|42|-|-sus|-6|-64|-7|-65|-43|-42|-2|-9|o|o6|o64|o7|o65|o43|o42|o2|-7b5})"
        ],
        "description": "pc:chord standard"
    },
    "pc-diatonic": {
        "prefix": "pcdia",
        "body": ["(pc:diatonic ${1:root} '${2:^-} '${3:degree})"],
        "description": "pc:diatonic standard"
    },
    "pc:make-chord-fixed": {
        "prefix": "pcmakechordfixed",
        "body": ["(pc:make-chord-fixed ${1:pitch} ${2:number} ${3:pcchord}$0)"],
        "description": "pc:make-chord-fixed"
    },
    "pc:make-chord": {
        "prefix": "pcmakechord",
        "body": [
            "(pc:make-chord ${1:lower} ${2:upper} ${3:number} ${4:pcchord}$0)"
        ],
        "description": "pc:make-chord"
    },
    "pc:quantize": {
        "prefix": "pcquant",
        "body": ["(pc:quantize ${1:pitch-in} ${2:pcscale}$0)"],
        "description": "pc:quantize"
    },
    "pc-random": {
        "prefix": "pcrand",
        "body": ["(pc:random ${1:lower} ${2:upper} ${3:pcscale}$0)"],
        "description": "pc:random"
    },
    "pc:relative": {
        "prefix": "pcrel",
        "body": ["(pc:relative ${1:pitch} ${2:step} pcscale$0)"],
        "description": "pc:relative"
    },
    "pc:scale": {
        "prefix": "pcscale",
        "body": [
            "(pc:scale ${1:0} '${2:pentatonic|wholetone|chromatic|octatonic|messiaen1|messiaen2|messiaen3|messiaen4|messiaen5|messiaen6|messiaen7|ionian|dorian|phrygian|lydian|lydian-dominant|lydian-mixolydian|mixolydian|aeolian|locrian)})"
        ],
        "description": "pc:scale"
    },
    "Scheme recursion example": {
        "prefix": "recursion",
        "body": [
            ";;;;;;;;;;",
            ";; recursion",
            ";;;;;;;;;;",
            "(define count-leaves",
            "\t(lambda (tree)",
			"\tif (atom? tree) 1",
            "\t\t(+ (count-leaves (car tree))",
            "\t\t(or (if (cdr tree) (count-leaves (cdr tree)))",
            "\t\t1)))))",
            ";; eg (count-leaves '((a b (c d)) (e) f))",
            ";;;;;;;;;;;;;;;;;;;;;;;",
            ";; example #2",
            "(define remove-all",
            "\t(lambda (obj lst)",
            "\t\t(cond ((null? lst)",
            "\t\t'())",
            "\t\t((list? (car lst))",
            "\t\t(cons (remove-all obj (car lst))",
            "\t\t\t(remove-all obj (cdr lst))))",
            "\t\t((equal? obj (car lst))",
            "\t\t(remove-all obj (cdr lst)))",
            "\t\t(else (cons (car lst) (remove-all obj (cdr lst)))))))$0",
        ],
        "description": "recursion example"
    },
    ":setup": {
        "prefix": ":setup",
        "body": [
            "(pm_print_devices)",
            "(define *mididevice* (pm_create_output_stream (pm_output_device_with_name \"IAC Driver Extempore Bus\")))" ,
            "(mu:test 38 1) ; MIDI channel defaults to 1",
            "(mu:testchord '(60 63 67) )",
        ],
        "description": "midi setup extempore"
    },
    "file header": {
        "prefix": "section",
        "body": [
            ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
            ";; $TM_FILENAME -- $1",
            ";; ",
            ";; ",
            ";; ",
            ";;",
            ";; ",
            ";; ",
            ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
        ],
        "description": "file header"
    },
    "fun doc header": {
        "prefix": "section",
        "body": [
            "; ${1:funname}",
            ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
            ";",
            "; Args:",
            "; -----",
            ";",
            ";",
            ";",
            "; Example:",
            "; --------",
            ";",
            ";",
            ";",
            ";",
            ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
        ],
        "description": "function description header"
    },
    ":mcc": {
        "prefix": ":mcc",
        "body": [
            "(:mcc ${1:cc|50} ${2:val|90} ${3:ch|0-default})"
        ],
        "description": "midi control change - *mididevice* implicit"
    },
    ":mcc-helper": {
        "prefix": ":mcc-helper",
        "body": [
            "(let ((beat (*metro* 'get-beat)))",
            "\t(:mcc 40 90))",
        ],
        "description": "helper to set up a manual midicc alignment with DW host"
    },
    ":add": {
        "prefix": ":add",
        "body": [
            "(:add ${1:val|atom-or-list} ${2:result|atom-or-list})"
        ],
        "description": "add atom-or-list to atom-or-list"
    },
    "log-info": {
        "prefix": "log-info",
        "body": [
            "(log-info ${1:'ciao})"
        ],
        "description": "log-info printing"
    }
}