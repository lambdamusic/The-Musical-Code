;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Utilities for *metro* beat constructs 
;
;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




; :BAR and :BEAT macros
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;; EXAMPLE
; (let ((beat (*metro* 'get-beat)))
;   (:bar 8
;     (:beat '(0 4) (play c3 90 1 1))
;     (:beat '(0 1 5) (play g3 90 1 1))
;     (:beat '(2 6) (play a3 90 1 1))
;     (:beat '(3 7) (play f3 90 1 1))
;     )
; )
;
;;;--------



(impc:aot:do-or-emit
    (define-macro (:bar . args)
    `(let ((*denom* ,(car args)))
        ,@(cdr args)))
)

(impc:aot:do-or-emit
    (define-macro (:beat y . args)
    `(for-each (lambda (step)
                    (if (equal? (modulo beat *denom*) step)
                        (begin ,@args)))
                (if (list? ,y)
                    ,y
                    (list ,y))))
)




;; ONBEAT X Y
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (onbeat denominator (list of numerators) (do ...... )) 
;
; Args:
; X = the DENOMINATOR 
; Y = the NUMERATOR (0 BASED)
; Y Accepts both single numbers and lists
;

; Example:
;; (let ((beat (*metro* 'get-beat)))
;;   (onbeat 2 0 (play dls 60 60 1))
;;   (onbeat 4 '(0 2 3/2) (play dls 48 60 1)))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;


(impc:aot:do-or-emit
    (define-macro (onbeat x y . args)
    `(for-each (lambda (step)
                    (if (equal? (modulo beat ,x) step)
                        (begin ,@args)))
                (if (list? ,y)
                    ,y
                    (list ,y))))
)



;; IFBEAT X Y
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (ifbeat denominator numerator (do ...) (else do ....))
;
;
;  Y: Accepts both single numbers and lists
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;


(impc:aot:do-or-emit
    (define-macro (ifbeat x y args . elseargs)
    `(for-each (lambda (step)
                    (if (equal? (modulo beat ,x) ,y)
                        ,args
                        ,@elseargs))
                (if (list? ,y)
                    ,y
                    (list ,y))))
)



;; IFBEAT-GT X Y
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; if beat greater than X
;
; (ifbeat-gt denominator numerator (do ...) (else do ....))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(impc:aot:do-or-emit
    (define-macro (ifbeat-gt x y args . elseargs)
    `(if (> (modulo beat ,x) ,y)
            ,args
            ,@elseargs))
)



;; IFBEAT-LT X Y
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; if beat less than X
;
; (ifbeat-lt denominator numerator (do ...) (else do ....))
;
; same as (let ((n (if (< (modulo beat 8) 4) 0 2))) 
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(impc:aot:do-or-emit
    (define-macro (ifbeat-lt x y args . elseargs)
    `(if (< (modulo beat ,x) ,y)
            ,args
            ,@elseargs))
)




;; IFBEAT-BTW X Y Z
;;;;;;;;;;;;;;;;;;;;;;;;;;;
; if beat between X and Y 
;
; (ifbeat-btw denominator numerator-left numerator-right (do ...) (else do ....))
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(impc:aot:do-or-emit
    (define-macro (ifbeat-btw x y z args . elseargs)
    `(if (and (> (modulo beat ,x) ,y) (< (modulo beat ,x) ,z))
            ,args
            ,@elseargs))
)
