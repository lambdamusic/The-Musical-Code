;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;; MIDI Functions for controlling volumes in Ableton LIVE
;;
;; See also
;; - https://forum.ableton.com/viewtopic.php?t=140489
;; => ~/Library/Preferences/Ableton/Live 9.2.3/User Remote Scripts/extempore/UserConfiguration.txt
;; - https://help.ableton.com/hc/en-us/articles/360010389480-Using-MIDI-CC-in-Live
;; - https://groups.google.com/g/extemporelang/c/9cQqmflEdpY/m/vej0rEw-AQAJ
;
;; MY ABLETON LIVE MAPPINGS
;
; VolumeSlider1: 1
; VolumeSlider2: 2
; VolumeSlider3: 3
; VolumeSlider4: 4
; VolumeSlider5: 5
; VolumeSlider6: 6
; VolumeSlider7: 7
; VolumeSlider8: 8
;;
; Send1Knob1: 11
; Send1Knob2: 12
; Send1Knob3: 13
; Send1Knob4: 14
; Send1Knob5: 15
; Send1Knob6: 16
; Send1Knob7: 17
; Send1Knob8: 18
; Send2Knob1: 19
; Send2Knob2: 20
; Send2Knob3: 21
; Send2Knob4: 22
; Send2Knob5: 23
; Send2Knob6: 24
; Send2Knob7: 25
; Send2Knob8: 26
;;
;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;
;; The primary MIDI channel that the Ableton controller uses
;; NOTE this is defined in ~/Library/Preferences/Ableton/Live X.X.X/User Remote Scripts/Extempore/UserConfiguration.txt under [Globals]
;; It is the channel used for default mappings of volumes etc..
;;
;; PS So the functions below are the equivalent for (:mcc CC VAL 9)
;;
(define *ableton-default-cc-channel* 9)





;; val to be used when incrementing without specifying where to stop
(define *mixer-default-upper-limit* 90)
(define *mixer-default-lower-limit* 0)

(define *debug* #f)


;; vals caches /  0 to 127
(define *mix1val* 90)
(define *mix2val* 90)
(define *mix3val* 90)
(define *mix4val* 90)
(define *mix5val* 90)
(define *mix6val* 90)
(define *mix7val* 90)
(define *mix8val* 90)
(define *mix9val* 90)
(define *mix10val* 90)  ;; CH 10 - MASTER VOLUME IN ABLETON LIVE



;; constant mixer structure  
(define *mixers* '(
        (1 *mix1val*)
        (2 *mix2val*)
        (3 *mix3val*)
        (4 *mix4val*)
        (5 *mix5val*)
        (6 *mix6val*)
        (7 *mix7val*)
        (8 *mix8val*)
        (9 *mix9val*)
        (10 *mix10val*)
    ))


;; boundaries
(define *mixer-upper-limit* 127)
(define *mixer-lower-limit* 0)



;
; helper:print-mixer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; helper 
;; pretty print Ableton LIVE mixer val
; <status>: 'changed' => stronger color  
; <status>: default => regular print  
(define helper:print-mixer
    (lambda (ch val status)
        (if (equal? status 'changed)
            (print-with-colors 'cyan 'default #f 
                (println 'MIXER ch '=> val))
            ;; else: monitor value only
            (println 'MIXER ch '== val)
        )
    )) 

;
; helper:print-mixers-all
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; pretty print Ableton LIVE  all mixers
(define helper:print-mixers-all
    (lambda ()
    (println '---*Mixers 'cache*---)
    (for-each (lambda (p)
            (helper:print-mixer (car p) (eval (cadr p)) 'show))
        *mixers*)
    (println )
        ))   



;;
;; The :mix inner function actually calling the CC change events.
;;
;; - handle max/min cases 
;; - handle values memory 
;; - call send-midi-cc function on default channel
;;
(define helper:inner_mixer
    (lambda (ch increment min-limit max-limit)
        (if (equal? ch 'all)
            (helper:print-mixers-all)
            (let 
                ((oldval (eval (cadr (assoc ch *mixers*))))
                (newval 0)) 
                ;
                (if *debug*
                    (log-info ch increment min-limit max-limit oldval)
                    )
                ;
                (if (not (integer? min-limit)) 
                    ;; trick to show specific channel: 'none is passed by macro 
                    (helper:print-mixer ch oldval 'show) 
                    (if (and (negative? increment) 
                             (>= min-limit oldval))
                        ;; when decreasing, min-limit can't be higher than old value
                        (helper:print-mixer ch oldval 'show)
                    
                        (begin 
                            ;
                            ;; check max boundaries
                            (if (< min-limit *mixer-lower-limit*)
                                (set! min-limit *mixer-lower-limit*)) 
                            (if (> max-limit *mixer-upper-limit*)
                                (set! max-limit *mixer-upper-limit*))
                            ;
                            ;; test increment
                            (set! newval (+ oldval increment))
                            (if (< newval min-limit)
                                (set! newval min-limit))
                            (if (> newval max-limit)
                                (set! newval max-limit))
                            ;
                            (if (= newval oldval)
                                (helper:print-mixer ch newval 'show)
                                (begin 
                                    ;;set cache
                                    (eval `(set! ,(cadr (assoc ch *mixers*)) newval))
                                    ;;mcc
                                    (send-midi-cc (now) *mididevice* 
                                        (real->integer ch) 
                                        (real->integer newval) 
                                        *ableton-default-cc-channel*)
                                    (helper:print-mixer ch newval 'changed)
                                ))
                            )
    ))))))







;
;; :mix - control Ableton LIVE mixer channels via MIDI CC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Args:
; -----
; ch: the CC channel (1-10 for volumes)
; action: +/- for increment/decrement 
; value: the fader value number (0 to 127)
; boundary: the min or max value where to stop
;
; Notes:
; ------
; CHANNEL 10 => the MASTER vol in ABLETON
; Values are set in real-time using now() // [not beat]
; IMPORTANT: communication is one-way only XTM=>DAW (not back-synced from DAW)
;
; DEFAULT MIN = 0 
; DEFAULT MAX = 90 
;
; Example:
; --------
;; (:mix) or (:mix 'all)  -- show all active values
;; (:mix 1)          -- [1 arg]: show current cached value for channel 1 
;; (:mix 1 10)       -- [2 args]: set channel 1 to 10 (up to DEFAULT MAX)
;; (:mix 'all 10)    -- [2 args]: set all channels to 10 
;; (:mix 1 '+ 1)       -- [3 args]: increment channel 1 by 1 (up to DEFAULT MAX)
;; (:mix 1 '- 1)       -- [3 args]: decrement channel 1 by -1 (up to DEFAULT MIN)
;; (:mix 1 '+ 1 50)    -- [4 args]: increment channel 1 by 1, up to 50
;; (:mix 1 '- 1 10)    -- [4 args]: decrement channel 1 by -1, up to 10 
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(impc:aot:do-or-emit
   (define-macro (:mix . args)
      (cond ((length-equal? args 0)
              ;; eg (:mix)
              (helper:print-mixers-all))
            ((length-equal? args 1) 
                ;; eg (:mix 5) ;; Show VAL for specific channel
            `(helper:inner_mixer ,(car args) 0 'none 'none)) 
            ((length-equal? args 2) 
                ;; eg (:mix 5 10) => set to '10' (min/max=default)
                ;;; eg (:mix 'all 40) => set all to '40'
              `(if (equal? ,(car args) 'all) 
                (helper:mixer-all ,(cadr args)) 
                (helper:inner_mixer ,(car args) ,(cadr args) ,(cadr args) ,(cadr args)))) 
            ((length-equal? args 3)  
                ;; eg (:mix 5 '+ 1) => increment by '1' (min/max=default)
                ;; eg (:mix 5 '- 1) => decrement by '1' (min/max=default)
             `(if (equal? ,(cadr args) '-) 
                (helper:inner_mixer ,(car args) (- 0 ,(caddr args)) *mixer-lower-limit* *mixer-upper-limit*)
                (helper:inner_mixer ,(car args) ,(caddr args) *mixer-lower-limit* *mixer-upper-limit*)
                ))
            ((length-equal? args 4)  
                ;; eg (:mix 5 '+ 1 20) => increment by '1' till 20
                ;; eg (:mix 5 '- 1 20) => decrement by '1' till 20
             `(if (equal? ,(cadr args) '-)
                (helper:inner_mixer ,(car args) (- 0 ,(caddr args)) ,(cadddr args) *mixer-upper-limit*)
                (helper:inner_mixer ,(car args) ,(caddr args) *mixer-lower-limit* ,(cadddr args))
                ))
            (#t (println "Not enough arguments"))))
)







;
; helper:mixer-all
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UTIL: set all 9 mixers to the same val
;; never called directly, but via `:mix 'all 90`
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define helper:mixer-all
    (lambda (val)
        (println '---*Mixers 'Reset*---)
        (:mix 1 val ) 
        (:mix 2 val )
        (:mix 3 val )
        (:mix 4 val )
        (:mix 5 val )
        (:mix 6 val )
        (:mix 7 val )
        (:mix 8 val )
        (:mix 9 val )
        ))






