;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;
;; helper functions for generatic musical structures 
;;
;;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;


; mkchord
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Args:
; root 
; chord-sym [default: '^]
; notes_number [default: 3]
;
; Example:
; (println (mkchord 60 '- 8))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-macro (mkchord . args)
  ;;(println args)
   (cond ((length-equal? args 1) ;; just root 
         `(pc:make-chord-fixed ,(car args) 3 (pc:chord ,(car args) '^)))
         ((length-equal? args 2) ; root and chord-sym
         `(pc:make-chord-fixed ,(car args) 3 (pc:chord ,(car args) ,(cadr args))))
         ((length-equal? args 3) ;; also notes_number
         `(pc:make-chord-fixed ,(car args) ,(caddr args) (pc:chord ,(car args) ,(cadr args))))         
         (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))))




; :mkchordrandom
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; wrapper around non-deterministic pc:make-chord (updated on 2020-10-04)
;
; Args:
; root 
; chord-sym [default: '^]
; notes_number [default: 3]
; upper_limit [default: 120]
;
; Example:
; (println (mkchordrandom 60 '- 3 120))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-macro (mkchordrandom . args)
  ;;(println args)
   (cond ((length-equal? args 1) ;; just root 
         `(pc:make-chord ,(car args) 120 3 (pc:chord ,(car args) '^)))
         ((length-equal? args 2) ; root and chord-sym
         `(pc:make-chord ,(car args) 120 3 (pc:chord ,(car args) ,(cadr args))))
         ((length-equal? args 3) ;; also notes_number
         `(pc:make-chord ,(car args) 120 ,(caddr args) (pc:chord ,(car args) ,(cadr args))))  
         ((length-equal? args 4) ;; also upper-limit
         `(pc:make-chord ,(car args) ,(cadddr args) ,(caddr args) (pc:chord ,(car args) ,(cadr args))))         
         (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))))





; __multiply_octaves
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; helper function: from a list, extend it by adding 12 to all elements (one octave)
;
; Args:
;
; Example:
; (_multiply_octaves (pc:scale 0 'ionian) 2)) 
;; => retuns 2 octaves of the scale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define _multiply_octaves 
  (lambda (scale octaves)
    (if (= octaves 1)
      scale)
      (dotimes (i octaves)
        (if (> i 0)
          (set! scale (append scale (add (* 12 i) scale)))))
          scale))


; mkscale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Args:
; root    [default: 60]
; mode    [default: 'ionian]
; num-notes [default: 1 octave]
; octaves [default: 1]
;
;
; Example:
; (mkscale 60 'aeolian 5) => 5 notes
; (mkscale 60 'aeolian 0 3) => 3 octaves (num notes is ignored)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(define mkscale
  (lambda (root . args)
  ; (println args)
   (cond ((null? args) ;; default
          (add root (pc:scale 0 'ionian)))   

          ((length-equal? args 1) 
           ;; 1 arg = scale symbol only  
           (add root (pc:scale 0 (car args))))
          ((length-equal? args 2) 
            ;; 2 args: scale, num-notes 
            ;; factor: calc how big the scale before slicing. 5 is the min lenght of a scale. We double that based on on the num-notes parameter
            (let* ((factor (+ (real->integer (/ (cadr args) 5)) 1)) 
                   (s1 (_multiply_octaves (pc:scale 0 (car args)) factor)))
              (slice (cadr args) (add root s1))))

          ((length-equal? args 3) 
            ;; 3 args: scale, num-notes (ignored), octaves 
            ;; added for backward compatibility
            (add root (_multiply_octaves (pc:scale 0 (car args)) (caddr args))))

          (else (print 'Error: 'arguments 'could 'not 'be 'resolved.))              
      )
    )          
)            




; mkrelscale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Combines mkscale and pc:relative
;
; Args:
; root    [eg: 60]
; reldegree    [eg: int, positive or negative]
; mode    [eg: 'ionian]
; num-notes [eg: 1]
;
;
; Example:
; (mkrelscale 60 -2 'pentatonic 3) ;; '(55 57 59)
; (mkrelscale 60 0 'pentatonic 3) ;; '(60 62 64)
; (mkscale 60 'pentatonic 3)     ;; '(60 62 64)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define mkrelscale
  (lambda (root reldegree mode num-notes)
    (mkscale (pc:relative root reldegree (pc:scale 0 mode)) mode num-notes)))






; mkrel
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Shortcut for pc:relative / returns a single note
;
; Args:
; root    [eg: 60]
; reldegree    [eg: int, positive or negative]
; mode    [eg: 'ionian]
;
;
; Example:
; (mkrel 60 0 'pentatonic) ;; 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define mkrel
  (lambda (root degree mode)
        (car (mkrelscale root degree mode 1))))




; octave, sixth etc..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Shortcuts for incrementing pitch using intervals
;
; Example:
; (octave '(c3 g3 a4))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-macro (octave plist)
   `(offset 12 ,plist))
(define-macro (seventhdom plist)
 `(offset 10 ,plist))
(define-macro (seventhmaj plist)
 `(offset 11 ,plist))
(define-macro (sixth plist)
 `(offset 9 ,plist))
(define-macro (fourth plist)
  `(offset 5 ,plist))
(define-macro (fifth plist)
   `(offset 7 ,plist))
(define-macro (thirdmaj plist)
  `(offset 4 ,plist))
(define-macro (thirdmin plist)
  `(offset 3 ,plist))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MONITOR values 
;; shortcut for printing out variables while in loops , using beat // default on 1/4
;;
;; Example
;
; (let ((beat (*metro* 'get-beat))
;         (v1 2) (v2 4)) 
;     (monitor v1 v2))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-macro (monitor . args)
    (if (number? (car args))
        `(onbeat ,(car args) 0 (println ,@(cdr args)))
        `(onbeat 1/4 0 (println ,@args))
    ))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; COMPATIBILITY MODE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define :mkchord mkchord)
(define :mkchordrandom mkchordrandom)
(define :mkscalerel mkrelscale)
(define :mkscale mkscale)
(define :mkrel mkrel)