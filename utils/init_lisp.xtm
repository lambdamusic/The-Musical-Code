;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;
;;
;;  generic common lisp / scheme utils 
;;
;;
;; author: @lambdamusic
;;;;;;;;;;;;;;;;;;;;;;;;;;








;+
;
;; helper: add two numbers or symbols (standing for numbers, eg d5)
(define helper:inner-do-add
  (lambda (x y)
    (+ (eval x) (eval y))))

;+
;
;; inner fn with cases to support :add
(define helper:inner-add
  (lambda (l1 l2)
    (cond ((= (length l1) (length l2))
            (map (lambda (x y) (helper:inner-do-add x y)) l1 l2))
          ((> (length l1) (length l2))
            (map (lambda (x y) (helper:inner-do-add x y)) 
            (cl:slice-left l1 (length l2)) l2))
          ((< (length l1) (length l2))
            (map (lambda (x y) (helper:inner-do-add x y)) 
            (cl:expand-list2 l1 (length l2)) l2))
    )))


;+
;
;; ADD
;; 
; increase a result atom/list, using a value atom/list 
; if lengths don't match, adjust them automatically by slicing/repeating elements
;
; examples
; (:add 4 2) ;; 6
; (:add '(4 5) 2) ;; 6
; (:add '(4) '(2)) ;; '(6)
; (:add 4 '(2 10 22)) ;; '(6 14 26) 
; (:add '(4 2) '(2)) ;; '(6)
; (:add '(4) '(2 4 6)) ;; '(6 8 10)
; (:add '(5 4) '(g3 c4 g4 e3)) ;; '(72 76 83 68)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define :add
  (lambda (val res)
    (cond ((and (list? val) (list? res)) 
            (helper:inner-add val res))
          ((and (atom? val)  (list? res))
            (helper:inner-add (make-list (length res) val) res))
          ((and (atom? val) (atom? res))
            (+ val (eval res)))
          ((and (list? val) (atom? res))
            (+ (car val) (eval res)))
          (else '()))))







;+
; repeat
; eg (rep 2 4) => (2 2 2 2)
(define (rep x y)
  (if (zero? y)
      '()
      (cons x
            (R x (- y 1)))))





(define cl:first car)

(define first car)

(define cl:rest cdr)

(define rest cdr)

(define cl:count length)

(define count length)

(define len length)




;
; (caddddr '(1 2 3 4 5 6 7 8)) ;; => 5
; (nth 5   '(1 2 3 4 5 6 7 8))  ;; => 6  // 0 based!
(define caddddr
   (lambda (l)
      (car (cddddr l))))



;; added on 21/1/11 cause the default one wasn't working
(define cl:last (lambda (lista)
                   (list-ref lista (- (length lista) 1))))


(define last cl:last)

;
; trick for shuffling a list
(define (cl:shuffle l)
  (cl:sort l
        (lambda (x y)
          (equal? 0 (random 2)))))


(define shuffle cl:shuffle)


;
;; reverse of cons: (cons 'b '(a))
(define cl:l-put
   (lambda (obj lst)
      (reverse (cons obj (reverse lst)))))

;
;; nth, reversed args 
(define cl:nth (lambda (index_0_based lst)
      (list-ref lst index_0_based)))

;; nth, reversed args 
(define nth cl:nth)


;
;; nth reversed and 1-based
; (take 9 (:mkscalerel 62 1 'dorian 8))
(define take (lambda (index_1_based lst)
    (if (< (length lst) index_1_based)
        (log-info "List too short for take")
        (list-ref lst (- index_1_based 1)))))



;
; takelist - take one or more elements from a list and return a list
;
; (takel 1 '(10 20 30 40)) ; +> (10) 
; (takel '(1 4) '(10 20 30 40)) ; +> (10 40) 
; (takel '(1 5) '(10 20 30 40)) ; +> (10 #f) 
(define takel (lambda (indices lst)
    (let ((els (if (list? indices) 
                    indices
                    (list indices))))   
        (map (lambda (x)
                (if (< (length lst) x)
                    (begin (log-info "List too short for take") #f)
                    (list-ref lst (if (> x 0) (- x 1) 0))))  ;; 0 == 1 / trick to make it easier to work with sin functions
            els)))) 










;; OLD implemetation: mind that I was taking 1 as lowest index (while now nth takes 0)
;;; the scheme equivalent is list-ref
;(define cl:nth 
;   (lambda (index ls)
;      ; are we at the required index?
;      (if (= index 1) 
;          ; return the head
;          (car ls) 
;          ; keep going, decrement the index and make the list shorter
;          (cl:nth (- index 1) (cdr ls) ))))


;
; add 1 to n
(define (1+ n) (+ n 1))

;
; remove 1 from n
(define (1- n) (- n 1))




;
;; (subst 9 7 '(5 (5 6 7 (6 7))))    =>  (5 (5 6 9 (6 9)))  
(define (cl:subst new old tree)
  (if (pair? tree)
      (let ((left (subst new old (car tree)))
            (right (subst new old (cdr tree))))
        (if (and (eq? left (car tree))
                 (eq? right (cdr tree)))
            tree
            (cons left right)))
      (if (eqv? old tree)
          new
          tree)))


;
;; (sublis '((6 . 9) (7 . 10)) '(5 (5 6 7 (6 7)))))  => (5 (5 9 10 (9 10)))
(define (cl:sublis alist tree)
  (if (pair? tree)
      (let ((left (sublis alist (car tree)))
            (right (sublis alist (cdr tree))))
        (if (and (eq? left (car tree))
                 (eq? right (cdr tree)))
            tree
            (cons left right)))
      (let ((new (assv tree alist)))
        (if new
            (cdr new)
            tree) ) ) )

;   
;;(cl:copy-tree '(5 (5 6 7(6 7))))
(define (cl:copy-tree x)
  (if (pair? x)
      (cons (cl:copy-tree (car x))
            (cl:copy-tree (cdr x)))
      x))


;
; Convert a floating-point number to a string of sign and at most 4 characters.
; Rounds the number so that 1.999 will come out as 2.00 , very small as 0.0 .
; numstring is written assuming that num is not too large or too small,
; i.e. num must be printable in 4 digits.
(define (cl:numstring num)
  (let* ((numc (abs num)) (sign (if (< num 0) -1 1)) (exponent 0))
    (if (< numc 1.0e-6)
    "0.0"
    (begin
      (if (< numc 1.0)
          (begin (while (< numc 100)
                (set! numc (* numc 10))
                (set! exponent (1- exponent)))
             (set! numc (* (round numc) (expt 10 exponent))) )
          (set! numc (* numc 1.0001)))
      (if (< sign 0)
          (string-append "-"
                 (substring (number->string numc) 0
                   (min 4 (string-length (number->string numc)))))
          (substring (number->string numc) 0
             (min 4 (string-length (number->string numc))))) ) ) ))



;
;(list-flatten '(9 9 (9 9 9 ))))  = (9 9 9 9 9)
(define cl:list-flatten 
   (lambda (l)
      (cond ((null? l)
             '())
            ((atom? l)
             (list l))
            (#t (append (cl:list-flatten  (car l)) (cl:list-flatten  (cdr l)))))))


;(list-flatten '(9 9 (9 9 9 ))))  = (9 9 9 9 9)
(define list-flatten cl:list-flatten)


;
;;;;;; extend a list with the last element duplicated
;;;;;; original version
;; add extra N elements to list (or turn atom into list of N elements)
; (cl:expand-list 50 3) ;; (50 50 50)
; (cl:expand-list '(50 51) 3) ;; (50 51 51 51 51)
(define cl:expand-list
   (lambda (l n)
      (if (list? l)
          (let ((xx (make-list n (cl:last l))))
             (append l xx))
          (let ((xx (make-list n l)))
             xx))))




;
;;;;;; new version 
;; add extra elements so that list has total len N
; (cl:expand-list2 50 3) ;; (50 50 50)
; (cl:expand-list2 '(50 30) 5) ;; (50 30 30 30 30)
(define cl:expand-list2 
   (lambda (l n)
      (if (list? l)
          (let ((xx (make-list (- n (length l)) (cl:last l))))
             (append l xx))
          (let ((xx (make-list n l)))
             xx))))




;
;; (list-to-string '(5 6 7))
;; from a list returns a string equivalent  - similar to atom->string..
;; there is list->string too, but I don't know how to use it!
(define cl:list-to-string 
   (lambda (lst)
      (let* ((out "(")
             (nlst (map (lambda (x)
                           (atom->string x))
                        lst)))
         (map (lambda (x)
                 (set! out (string-append out " " x)))
              nlst)
         (set! out (string-append out " )"))
         out)))






;
; slice a list from beginning, returns a list
; (cl:slice-left '(1 2 3 4) 2) ;; => (1 2)
; (cl:slice-left '(1 2 3 4) 7) ;; => (1 2 3 4)
(define cl:slice-left
    (lambda (lst num)
       (if (< (length lst) num)
           (begin (println "Warning: list slicing index too big!")
                  (set! num (length lst))))
      (if (> num 0)
         (cons (car lst) (cl:slice-left (cdr lst) (- num 1)))
         '())))

      



;; March 20, 2021
;
;; simpler version of slice, with more natural args order
;; slice index can be in any position
; (slice 2 '(1 2 3 4)) ;; => (1 2)
; (slice 7 '(1 2 3 4)) ;; => (1 2 3 4)
(define slice
   (lambda (arg1 arg2)
        (if (list? arg1)
            (cl:slice-left arg1 arg2 )
            (cl:slice-left arg2 arg1)
            )))








;
; slice a list from specified position, returns a list
; (when #f (cl:slice '(1 2 3 4) 2 2))
(define cl:slice
    (lambda (lst start count)
        (if (> start 1)
            (cl:slice (cdr lst) (- start 1) count)
            (cl:slice-left lst count))))










;;;;;;;;;;;;;;;;;;;
;STRING HELPERS
;;;;;;;;;;;;;;;;;;;


;; returns a char from a string of length 1, or a list of chars from a longer string
;;; utility on top of string->list
(define cl:char 
   (lambda (string_char)
      (if (string? string_char)
          (if (> (string-length string_char) 0)
              (if (> (string-length string_char) 1)
                  (string->list string_char)
                  (car (string->list string_char))))            
          (print 'please 'enter 'a 'string))))



;; matches a single character in a string, and replaces it
(define cl:string-replace 
   (lambda (s match replacement)
      (let ((ll (string->list s))
            (match1 (cl:char match))
            (replacement1 (cl:char replacement)))
         (if (= (string-length match) 1)
             (let ((z (map (lambda (x)
                              (if (equal? x match1)
                                  replacement1
                                  x))
                           ll)))
                (list->string (cl:list-flatten z)))
                ;z)
             (print "i can match only single characters for now")))))


;; makes a string upper case
(define cl:string-capitalize
   (lambda (s)
      (string-append (string (char-upcase (string-ref s 0))) (substring s 1 (string-length s)))))


;; makes a string lower case
(define cl:string-lower
   (lambda (s)
      (let ((out ""))
         (for-each (lambda (x)
             (set! out (string-append out (string (char-downcase x)))))
          (string->list s))
         out)))


;; makes a string upper case
(define cl:string-upper
   (lambda (s)
      (let ((out ""))
         (for-each (lambda (x)
             (set! out (string-append out (string (char-upcase x)))))
          (string->list s))
         out)))



;; works only with single chars for now
;; return the position of a char in a string
(define cl:string-find-char 
   (lambda (z singlechar)
      (if (> (string-length singlechar) 1)
          (print "can't match strings longer than 1 char")
          (let p ((x 1))
             (let ((l (string->list z)))
                (if (equal? (cl:nth x l) (cl:char singlechar))
                    x
                    (if (< x (length l))
                        (p (+ x 1))
                        #f)))))))






;
;; hack for checking is a string exists in another string
; (if #f (cl:string-find-char "M 3.4, Central California" "M"))
(define cl:string-find
   (lambda (s find)
      (if (> (string-length s)
             (string-length (cl:string-replace s find "")))
          #t
          #f)))






;
;; divides a string on a selected char, left or right side
;; returns false if the singlechar is not found
;; the singlechar is excluded from the resulting string
; (cl:string-split "M 3.4, Central California" "," 'right)
(define cl:string-split 
   (lambda (z singlechar left-or-right)
      (if (> (string-length singlechar) 1)
          (print "can't match strings longer than 1 char")
          (let ((pos (cl:string-find z singlechar)))
             (if pos
                 (cond ((equal? left-or-right 'left)
                        (substring z 0 (- pos 1)))
                       ((equal? left-or-right 'right)
                        (substring z pos (string-length z))))
                 #f)))))



; (cl:string-chunk "M 3.4, Central California" "M" ",")
(define cl:string-chunk
   (lambda (z char_left char_right)
      (if (or (> (string-length char_left) 1) (> (string-length char_right) 1))
          (print "can't use matching strings longer than 1 char")
          (let ((left_half (cl:string-split z char_left 'right)))
             (if left_half
                 (cl:string-split left_half char_right 'left)
                 #f)))))






;; extension of string->number: eliminates white spaces
;; otherwise (print (string->number " 5.6 ")) would given an error
(define cl:string->number 
   (lambda (s)
      (string->number (list->string (remove-all (cl:char " ") (string->list s))))))



;; separates words delimited by empty spaces
(define cl:string-tokenize 
   (lambda (s)
      (cl:string-split s " ")))


;; convoluted way to check if a ratio is a perfect integer
;; (todo: improve?)
;; essenzialmente creo una stringa (from the ratio) , poi la splitto, poi controllo che la seconda parte sia uguale a 0 trasformandola in numero di nuovo
(define cl:ratio_is_perfect
   (lambda (f)
      (equal? 0 (string->number (cadr (cl:string-split (number->string (rational->real f)) "." ))))))







;;;;;;;;;;;;;;;;;;;
;MISC MACROS 
;;;;;;;;;;;;;;;;;;;


(define-macro (def name args)
   `(define ,name ,args))

(define-macro (cl:sort-asc l)
   `(cl:sort ,l <))

(define-macro (cl:sort-desc l)
   `(cl:sort ,l >))

(define sorta cl:sort-asc)

(define sortd cl:sort-desc)


;
;
; shortcut for determining lists of equal length: takes both a list or a number for comparison
(define-macro (length-equal? x y)
   `(cond ((and (list? ,x) (list? ,y))
       	   (equal? (length ,x) (length ,y)))
           ((and (list? ,x) (number? ,y))
       	   (equal? (length ,x) ,y))
           (#t (print 'Error: 'length-equal? 'needs 'two 'lists 'or 'one 'list 'and 'a 'number))))



;
; ONEOF: like random, but doesn't requires parenthesis :  (oneof c5 c6 c7)
; (oneof 5 6)  => 5 or 6
; (oneof 5)  => 5 
; (oneof '(5 6))  => 5 or 6 
; (oneof c5 c6)   => 72 or 84
; (oneof (--domaggiore 45 8)) ==> a note in the scale
(define-macro (oneof . args)
   (cond ((length-equal? args 0)
          (print 'please 'provide 'arguments))
         ((length-equal? args 1)
          `(cond ((list? ,@args)
                  (random ,@args))
                 (#t ,@args)))
         (#t `(random (list ,@args)))))





;
;; http://download.plt-scheme.org/doc/372/html/t-y-scheme/t-y-scheme-Z-H-10.html#node_chap_8
;; ----------------------
;; (if-random .6 (print 'ciao) (print 'baby))
(define-macro (if-random x args . elseargs)
   `(if (> (random) ,x)
        ,args 
        ,@elseargs))


(define ifr if-random)


;; (when (> (random) .1) (print 'ca) (print 'ciao))
(define-macro (when-random x . args )
   `(when (> (random) ,x)
        (begin ,@args)))



;
;; try to apply cdr to arg1, do it and return that, otherwise return arg2
;; if the arg1 list still has elements => True
;; used in temporal recursions to loop through a list, and eventually go back to a seed list
;;
;; example
;; (cdr-or-else '(a) '(a b)) ; => '(a b)
(define-macro (cdr-or-else list1 list2)
   `(if (null? (cdr ,list1))
        ,list2
        (cdr ,list1)))

;;
;; if the cdr of the list-condition exists, then proceed / else alternaive
;;
;; example
; (if-cdr-notnull2 '(a)
;   (log-info 'good-cdr)
;   (log-info 'bad-cdr))  ;; => true
;;
(define-macro (if-cdr-notnull list1 args . elseargs)
   `(if (not (null? (cdr ,list1)))
        ,args
        ,@elseargs)) 


(define pi 3.14159265358979323846)
(define 2pi (* 2.0 pi))

;
; enhanced version of cosr that also floors the value (eg useful for generating notes, or precise beats)
(macro (cosrfloor args)
   (if (> (length args) 5)
       `(floor (+ ,(caddr args) (* ,(cadddr args) (cos (* 2pi (+ beat ,(cadr args)) ,(car (cddddr args)))))))
       `(floor (+ ,(cadr args) (* ,(caddr args) (cos (* 2pi beat ,(cadddr args))))))))

;
; enhanced version of cosr that also floors the value - for ratios
(macro (cosratio args)
   (if (> (length args) 5)
       `(real->rational (+ ,(caddr args) (* ,(cadddr args) (cos (* 2pi (+ beat ,(cadr args)) ,(car (cddddr args)))))))
       `(real->rational (+ ,(cadr args) (* ,(caddr args) (cos (* 2pi beat ,(cadddr args))))))))



;
;; rotate list  [July 26, 2014]
(define rotate
  (lambda (lst amt)
     (let loop ((l (if (> amt 0) (reverse lst) lst))
	 (cnt (abs amt)))
 (if (<= cnt 0)
     (if (> amt 0) (reverse l) l)
     (loop (append (cdr l) (list (car l)))
	   (- cnt 1))))))





;
; :mklist
;; (:mklist 4 (oneof 50 60))
;; (:mklist 4 (oneof (:mkscale 50 'pentatonic 10)))
(define-macro (:mklist . args)
   `(make-list-with-proc ,(car args) (lambda (x) ,(cadr args) )))



(define sum_list
  (lambda (lst)
    (foldl (lambda (a b) (+ a b)) 0 lst)))




;
; range (like in Python)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
; Example:
; --------
; (range 1 10) => '(1 2 3 4 5 6 7 8 9 10)
; (range 1 10 2) => '(1 3 5 7 9)
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define range
  (lambda (min max . step)
   ;  (println min max step)
    (if (null? step)
        (set! step '(1))) 
    (when (<= min max)
      (cons min (range (+ min (car step)) max (car step)))))) 






;; split a list when input element is found
;; remaining part of the list is returned
;
; (list-split-at 'b '(a b c)) ;; +> (b c)
(define list-split-from
    (lambda (element lst)
        (if (member element lst)
            (let ((a (list-position element lst))) 
                a
                (cl:nthcdr a lst)
        ))))  


;; split a list after input element is found
;; remaining part of the list is returned
;
; (list-split-at 'b '(a b c)) ;; +> (c)
(define list-split-after
    (lambda (element lst)
        (if (member element lst)
            (let ((a (list-position element lst))) 
                a
                (cl:nthcdr (+ a 1) lst)
        )))) 




;
; oo:make-object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Basic structure for OO programming
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define oo:make-object
   (lambda ()
      (let* ((klassname '<object>)
             (super #f)
             (isa (lambda (t)
                     (if (equal? t klassname)
                         #t
                         (if super
                             (super 'isa t)
                             #f))))
             (dispatch (lambda (msg methods)
                          (if (assoc msg methods)
                              (cdr (assoc msg methods))
                              (begin (print-error 'No 'such 'method) (error "")))))
             (get-method (lambda (msg) (cdr (assoc msg methods))))
             (add-method (lambda (name closure) ;; for mixings
                            (set! methods (cons (cons name closure) methods)) #t))
             (get-methods (lambda () methods))
             (printer (lambda () (print "object")))
             (methods (list (cons 'isa isa)
                            (cons 'get-method get-method) (cons 'add-method add-method)
                            (cons 'dispatch dispatch) (cons 'get-methods get-methods)))
             (self (lambda (msg . args)
                      (apply sys:dynamic-call
                             ((cdr (assoc 'dispatch methods)) msg methods)
                             args))))
         self)))


